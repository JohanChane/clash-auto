#!/usr/bin/env python3
# _*_ coding: UTF-8 _*_

import os, sys, shutil, configparser
from enum import Enum
import ruamel.yaml
import requests
from clashautoutil import ClashUtil

# ## Global Vars
SCRIPT_PATH = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))
CFG_DIR = os.path.join(SCRIPT_PATH, "config")
PROFILE_DIR = os.path.join(SCRIPT_PATH, "profiles")

BASIC_CLASH_CONFIG_PATH = os.path.join(SCRIPT_PATH, "basic_clash_config.yaml")
FINAL_CLASH_CONFIG_PATH = os.path.join(SCRIPT_PATH, "final_clash_config.yaml")
TIMEOUT = 5

PATH_OF_UPDATE_CFG_RES = os.path.join(SCRIPT_PATH, "update_clashcfg_res.py")

def select(options):
    print("Please select an option:")
    for i, item in enumerate(options):
        print(i, item)

    try:
        choice = int(input("Enter your choice (num): "))
    except ValueError:
        choice = len(options)
    if choice < 0:
        choice = len(options)

    return choice

def get_file_names(dir_path):
    file_names = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]
    file_names.sort()
    return file_names

class ServerCmd(Enum):
    RESTART = 1
    STOP = 2
    CONFIG = 3
    INSTALL = 4
    UNINSTALL = 5
    TEST = 6

def clash_server_ctl(server_cmd):
    os.chdir(SCRIPT_PATH)

    if server_cmd == ServerCmd.RESTART:
        cmd = f"sudo systemctl restart clash"
    elif server_cmd == ServerCmd.STOP:
        cmd = f"sudo systemctl stop clash"
    elif server_cmd == ServerCmd.CONFIG:
        cmd = f"sudo systemctl edit clash"
    elif server_cmd == ServerCmd.TEST:
        cmd = f'clash -d "{CFG_DIR}" -f "{FINAL_CLASH_CONFIG_PATH}" -t'
        print(cmd)

    os.system(cmd)

def main():
    #if os.geteuid() != 0:
    #    os.execvp("sudo", ["sudo", * sys.argv])
    #    return 0

    os.chdir(SCRIPT_PATH)
    
    config = configparser.ConfigParser()
    config.read("config.ini")
    sc_host = config.get("main", "sc_host")

    with open(BASIC_CLASH_CONFIG_PATH, "r", encoding="utf-8") as f:
        basic_yaml_data = ruamel.yaml.safe_load(f)
    proxy = ClashUtil.get_proxy(basic_yaml_data)
    
    session = requests.Session()
    session.headers.update({"User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"})
    if proxy:
        protocol, address = proxy.split("://")
        session.proxies = {
            protocol: address
        }
    session.timeout = TIMEOUT

    clash_util = ClashUtil(session, CFG_DIR, PROFILE_DIR, sc_host);

    options = ["update_final_config", "update_profile", "select_profile",
               "restart_clash_service", "stop_clash_service", \
               "test_config", "create_yaml", \
               "config_clash_service", "restart_clash_auto", "exit"]
    while True:
        print()
        choice = select(options)
        if choice >= len(options):
            print("Invalid selection, please try again")
            continue
        choiced_option = options[choice]
        if choiced_option == "update_final_config":
            profile_path = os.path.join(SCRIPT_PATH, "final_clash_config.yaml")
            updated_res, no_update_res = clash_util.update_dep_net_res(profile_path)
            print("updated_res:")
            [print(f'-   {s}, {i}') for s, r in updated_res.items() for i in r]
            print("no_update_res:")
            [print(f'-   {s}, {i}') for s, r in no_update_res.items() for i in r]

            clash_server_ctl(ServerCmd.RESTART)
        elif choiced_option == "update_profile":
            file_names = get_file_names(PROFILE_DIR)
            profiles = [f for f in file_names if not f.endswith("~")]
            profile_index = select(profiles)
            if profile_index >= len(profiles):
                print("backward")
                continue
            choiced_profile_name = profiles[profile_index]
            if choiced_profile_name.endswith("_url"):
                profile_name = choiced_profile_name[:-4] + ".yaml"
                profile_path = os.path.join(PROFILE_DIR, profile_name)

                urls = ClashUtil.extra_urls(os.path.join(PROFILE_DIR, choiced_profile_name))
                profile_url = ""
                if urls:
                    profile_url = "|".join(urls)
                out_url, out_content = clash_util.fetch_sub_url(profile_url)
                if out_content:
                    with open(profile_path, "wb") as f:
                        f.write(out_content)
                        print(f'Updated profile: "{profile_path}", "{out_url}"')
                else:
                    print(f'Failed to update profile: out_url="{out_url}"')
                    print("backward")
                    continue
            else:
                profile_name = choiced_profile_name
                profile_path = os.path.join(PROFILE_DIR, profile_name)

            sections = ["proxy-providers", "rule-providers"]
            updated_res, no_update_res = clash_util.update_dep_net_res(profile_path, sections)
            print("updated_res:")
            [print(f'-   {s}, {i}') for s, r in updated_res.items() for i in r]
            print("no_update_res:")
            [print(f'-   {s}, {i}') for s, r in no_update_res.items() for i in r]
        
        elif choiced_option == "select_profile":
            file_names = get_file_names(PROFILE_DIR)
            profiles = [f for f in file_names if not f.endswith("~") and not f.endswith("_url")]
            profile_index = select(profiles)
            if profile_index >= len(profiles):
                print("backward")
                continue
            choiced_profile_name = profiles[profile_index]
            profile_name = choiced_profile_name
            
            profile_path = os.path.join(PROFILE_DIR, profile_name)
            with open(profile_path, "r", encoding="utf-8") as f:
                profile_yaml_data = ruamel.yaml.safe_load(f)
            merged_yaml_data = ClashUtil.merge_profile(basic_yaml_data, profile_yaml_data)
            with open(FINAL_CLASH_CONFIG_PATH, "w", encoding="utf-8", newline="") as f:
                ruamel.yaml.round_trip_dump(merged_yaml_data, f)
            print(f'Merged "{BASIC_CLASH_CONFIG_PATH}" and "{profile_path}" into "{FINAL_CLASH_CONFIG_PATH}"')

            clash_server_ctl(ServerCmd.RESTART)

        elif choiced_option == "restart_clash_service":
            clash_server_ctl(ServerCmd.RESTART)
        elif choiced_option == "stop_clash_service":
            clash_server_ctl(ServerCmd.STOP)
        elif choiced_option == "config_clash_service":
            clash_server_ctl(ServerCmd.CONFIG)
            clash_server_ctl(ServerCmd.RESTART)
        elif choiced_option == "test_config":
            clash_server_ctl(ServerCmd.TEST)
        elif choiced_option == "create_yaml":
            file_names = get_file_names(os.path.join(SCRIPT_PATH, "tpl"))
            file_names = [i for i in file_names if os.path.splitext(i)[1] == ".yaml"]
            index = select(file_names)
            if index >= len(file_names):
                print("backward")
                continue
            tpl_config_path = f"tpl/{file_names[index]}"
            tpl_out_config_path = f"tpl/out/{file_names[index]}"
            url_path = "tpl/proxy_provider_urls"
            urls = ClashUtil.extra_urls(url_path)
            proxy_urls, failed_urls = clash_util.create_yaml_base_on_tpl(urls, tpl_config_path, tpl_out_config_path)
            print("used providers:")
            [print(f"-   {i}") for i in proxy_urls]
            print("failed providers:")
            [print(f"-   {i}") for i in failed_urls]
            shutil.copy(tpl_out_config_path, "profiles/")
            print(f'copied "{tpl_out_config_path}" to profile dir')
        elif choiced_option == "restart_clash_auto":
            exec = sys.executable
            os.execl(exec, exec, * sys.argv)
        elif choiced_option == "exit":
            break;
        else:
            sys.stderr.write("Not match the option")

if __name__ == "__main__":
    main()
